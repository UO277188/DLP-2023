CATEGORIES
sentencia, expresion, tipo

NODES
programa -> variables:definicionVariable* structs:definicionStruct* funciones:definicionFuncion*;
definicionFuncion -> nombre:string params:definicionVariable* tipo variablesLocales:definicionVariable* sentencia*;
definicionVariable -> nombre:string tipo;
definicionStruct -> nombre:string campos:definicionVariable*;

tipoEntero:tipo -> ;
tipoReal:tipo -> ;
tipoChar:tipo -> ;
tipoArray:tipo -> longitud:int tipo;
tipoStruct:tipo -> nombre:string;
tipoVoid:tipo -> ;

print:sentencia -> expresion? tipo_print:string;
read:sentencia -> expresion;
asignacion:sentencia -> izquierda:expresion derecha:expresion;
if:sentencia -> condicion:expresion verdadero:sentencia* falso:sentencia*;
while:sentencia -> condicion:expresion sentencia*;
invocacion:sentencia -> nombre:string params:expresion*;
return:sentencia -> expresion*;

constanteEntero:expresion -> valor:int;
constanteReal:expresion -> valor:double;
constanteChar:expresion -> valor:string;
variable:expresion -> nombre:string;
expresionBinaria:expresion -> izq:expresion operador:string der:expresion;
expresionUnaria:expresion -> expresion operador:string;
conversion:expresion -> tipo expresion;
invocacionExpresion:expresion -> nombre:string params:expresion*;
accesoArray:expresion -> array:expresion indice:expresion;
accesoCampo:expresion -> struct:expresion campo:expresion;